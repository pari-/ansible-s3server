---

- name: ensure presence of data- and metadata directory
  file:
    state: "directory"
    mode: "0700"
    path: "{{ item }}"
  with_items:
    - "{{ s3server_data_path }}"
    - "{{ s3server_metadata_path }}"

- name: generate configuration file
  template:
    src: "opt/s3server/config.json.j2"
    dest: "{{ s3server_config_file }}"
  notify:
    - "restart s3server"

- name: generate location configuration file
  template:
    src: "opt/s3server/locationConfig.json.j2"
    dest: "{{ s3server_config_location_file }}"
  notify:
    - "restart s3server"

- name: generate authdata.json
  template:
    src: "opt/s3server/conf/authdata.json.j2"
    dest: "/opt/s3server/conf/authdata.json"
  notify:
    - "restart s3server"
  when: s3server_credentials is defined and s3server_credentials
  tags:
    - "authdata"

- name: get known processes by pm2
  command: |
    "{{ s3server_pm2_binary }}" jlist
  register: pm2_list
  check_mode: "no"
  changed_when: False

- name: create pm2 configuration
  template:
    src: "opt/s3server/pm2_config.yml.j2"
    dest: "{{ s3server_git_dest }}/pm2_config.yml"

- name: register s3server to pm2 for automatic startup
  shell: |
    "{{ s3server_pm2_binary }}" start "{{ s3server_git_dest }}/pm2_config.yml"
  when: pm2_list.stdout.find('s3server') == -1

- name: run pm2 save
  shell: |
    "{{ s3server_pm2_binary }}" save
  when: pm2_list.stdout.find('s3server') == -1

- name: force all notified handlers to run immediately 
  meta: flush_handlers
